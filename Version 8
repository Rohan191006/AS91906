import tkinter as tk
from tkinter import *
from tkinter import messagebox
import random
import json

# Constant to switch between Login and signup page
ACCOUNT_OPTIONS = ["Login", "Signup"]

# class for game page
class Gamepage(tk.Tk):
    derived_question = None
    answer = None
    def __init__(app, difficulty):
        super().__init__()
        app.title("Knockout Numbers")
        app.geometry("600x400")
        app.configure(bg='#0294ee')
        app.resizable(False, False)
        app.answered_already= False
        score= IntVar()
        app.time_left = 60
        app.gif_index = 0

        # Function to error prrof math game entry box
        def check(var1):
            try:
                int(var1.get())
            except ValueError:
                if var1.get().isalpha()==True:
                    error_label.config(text="Enter a number\nnot a letter", font=("Helvetica", 13))
                    app.error_clear_after=app.after(2500, error_clear)
                elif var1.get()=="":
                    error_label.config(text="Dont leave it blank\nAnswer the Question", font=("Helvetica", 13))
                    app.error_clear_after=app.after(2500, error_clear)
                else:
                    error_label.config(text="Enter a number\nnot a special character", font=("Helvetica", 13))
                    app.error_clear_after=app.after(2500, error_clear)
            else:
                submit(solving)
            try:
                solving.delete(0, tk.END)
            except Exception:
                pass

        # Function to evaluate answer entered by user
        def submit(var1):
            if app.answered_already== False:
                if var1.get() == str(app.answer):
                    result_label.config(text="Correct", fg="yellow")
                    app.gif_index=10
                    player_gif()
                    score.set(score.get()+1)
                    app.try_again_after=app.after(1000, try_again)
                    if score.get()==10:
                        app.final_page(1)

                else:
                    result_label.config(text="Wrong", fg="red")
                    opponent_gif()
                    app.time_left-=2
                    time_deduc_label.config(text="-2")
                    app.try_again_after=app.after(1000, try_again)
                app.answered_already = True

        # Function to clear error label
        def error_clear():
            error_label.config(text="")

        # Function used to play gif if user gets the answer right
        def player_gif():
            if app.gif_index == 16: 
                app.gif_index = 0
                return
                
            app.gif_image = tk.PhotoImage(file="boxing.gif", format=f"gif -index {app.gif_index}")
            gif_canvas.create_image(0,-30, anchor="nw", image=app.gif_image)
            app.gif_index+=1
            app.player_gif_after=app.after(30, player_gif)

        # Function used to play gif if user gets the answer wrong
        def opponent_gif():

            if app.gif_index == 10: 
                app.gif_index = 0
                return
            
            app.gif_image = tk.PhotoImage(file="boxing.gif", format=f"gif -index {app.gif_index}")
            gif_canvas.create_image(0,-30, anchor="nw", image=app.gif_image)
            app.gif_index+=1
            app.opponent_gif_after=app.after(30, opponent_gif)

        
        # Function used to update timer on game page
        def update_timer():
            # Disabling buttons after game has started
            back_button.config(state=tk.DISABLED)
            exit_button.config(state=tk.DISABLED)
            if app.time_left > 0:
                app.time_left -= 1
                timer_label.config(text=f"Time left: {app.time_left}s")
                app.update_timer_after=app.after(1000, update_timer)
            else:
                app.final_page(2)


        # Function to display new question on game page and also used to satrt timer
        def try_again():
            result_label.config(text="")
            time_deduc_label.config(text="")
            submit_button.config(state=tk.NORMAL)
            try_again.num1update = random.randint(min_var, max_var)
            try_again.num2update = random.randint(min_var, max_var)
            #  Used to switch between difficulties
            if difficulty==1:
                operation = random.choice(["+"])
            elif difficulty==2:
                operation = random.choice(["+", "-"])
            else:
                operation = random.choice(["+", "-", "*"])
            # Widgets that appear after start button is pressed
            app.derived_question= f"{try_again.num1update} {operation} {try_again.num2update}"
            app.answer= eval(app.derived_question)
            app.derived_question = f"{try_again.num1update} {operation} {try_again.num2update}"
            app.answer = eval(app.derived_question)
            score_label= tk.Label(app,text=f"Score: {score.get()}",bg='#0294ee', font= ("Helvetica bold", 16), fg='white')
            score_label.place(relx=0.63, rely=0.7)
            newQ = tk.Label(app, text=app.derived_question, font=("Helvetica bold", 16),bg='#0294ee', fg='white')
            newQ.place(relx=0.4, rely=0.7, relwidth=.2)
            app.answered_already= False
            solving.delete(0, tk.END)
            if app.time_left==60:
                update_timer()


        #  Used to change boundary values for questions at differernt difficulties
        if difficulty == 1: 
            max_var = 10
            min_var = 0
        elif difficulty == 2:
            max_var = 20
            min_var = 10
        else:
            max_var = 30
            min_var = 20

        # Widgets for game page
        solving = tk.Entry(app)
        start =tk.Button(app, text="Start", command=try_again,bg='#ffffff')
        start.place(relx=0.463, rely=0.7)
        app.gif_image = tk.PhotoImage(file="boxing.gif", format="gif -index 1")
        gif_canvas = tk.Canvas(width=480, height=250, background="white")
        gif_canvas.create_image(0,-30, anchor="nw", image=app.gif_image)
        gif_canvas.place(x=0,y=10, anchor="n", relx=0.5)
        solving.place(relx=0.4, rely=0.8, relwidth=0.2, relheight=0.05)
        submit_button = tk.Button(app, text="Submit", command=lambda: check(solving),bg='#ffffff')
        submit_button.place(relx=0.458, rely=0.9)
        submit_button.config(state=tk.DISABLED)
        back_button = tk.Button(app, text="GO Back", bg="#ffffff", command=lambda: app.change_page())
        back_button.place(relx=0.01, rely=0.8)
        exit_button= tk.Button(app, text='Exit' , bg="#ffffff", command=lambda: app.destroy())
        exit_button.place(relx=0.01, rely=0.9)
        result_label = tk.Label(app, text="", font=("Helvetica bold", 16), bg='#0294ee')
        result_label.place(relx=0.25, rely=0.7)
        error_label= tk.Label(app, text="", fg="red", font=("Helvetica bold", 14), bg='#0294ee')
        error_label.place(relx=0.65, rely=0.765)
        timer_label = tk.Label(app, text=f"Time left: {app.time_left}s", font=("Helvetica bold", 16), bg='#0294ee', fg='white')
        timer_label.place(relx=0.55, rely=0.9)
        time_deduc_label=tk.Label(app, text="", fg='red', font=("Helvetica bold",16), bg='#0294ee')
        time_deduc_label.place(relx=0.77, rely=0.9)        
        app.mainloop()
    
    # Function to go back to Introductioon Page when game is not running
    def change_page(self):
        self.destroy()
        Intropage()

    # Function to switch to final page after game completion
    def final_page(app, resul):
        if hasattr(app, "error_clear_after"):
            app.after_cancel(app.error_clear_after)
        if hasattr(app, "try_again_after"):
            app.after_cancel(app.try_again_after)
        if hasattr(app, "player_gif_after"):
            app.after_cancel(app.player_gif_after)
        if hasattr(app, "opponent_gif_after"):
            app.after_cancel(app.opponent_gif_after)
        if hasattr(app, "update_timer_after"):
            app.after_cancel(app.update_timer_after)
        app.destroy()
        Results_page(resul)

# class for Login screen with error proofing
class Login(Tk):
    def __init__(root):
        super().__init__()
        root.option = 0
        root.title('Knockout Numbers Login Page')
        root.geometry('625x475')
        root.configure(bg="white")
        root.resizable(False, False)

        # Function to switch between Login and sign up page
        def accounts():
            old_option = ACCOUNT_OPTIONS[root.option]
            if root.option == 1:
                root.option = 0
                label.config(text="Don't have an account?")
            else:
                root.option = 1
                label.config(text="Already have an account?")
            heading.config(text=ACCOUNT_OPTIONS[root.option])
            main_button.config(text=ACCOUNT_OPTIONS[root.option])
            change_option.config(text=old_option)

        def submit():
            username=user.get()
            password=code.get()

            if len(username) > 4 and username.find(" ") == -1:
                if len(password) > 4 and password.find(" ") == -1:
                    if root.option == 0:
                        # Sign In
                        open_logins = open("logins.json", "r")
                        accounts = json.load(open_logins)
                        open_logins.close()
                        # Reading login info from json file
                        for account in accounts:
                            if account["username"] == username and account["password"] == password:
                                root.destroy()
                                Intropage()
                                return
                            
                        messagebox.showerror(message="Invalid login")
                    else:
                        # Sign Up
                        open_logins = open("logins.json", "r")
                        accounts = json.load(open_logins)
                        open_logins.close()
                        # writing login info to json file
                        accounts.append({"username": username, "password": password})
                        write_file = open("logins.json", "w")
                        json.dump(accounts, write_file)
                        write_file.close()
                        root.destroy()
                        Intropage()
                        return
                else:
                    messagebox.showerror(message="password too short and/or has space")
            else:
                messagebox.showerror(message="username too short and/or has space")


        
        # Widgets for login page
        frame= Frame(root, width=350, height=350, bg="white")
        frame.place(x=150, y=70)


        heading = Label(frame, text = ACCOUNT_OPTIONS[root.option], fg = '#57a1f8', bg='white', font = ('Helvetica', 23, 'bold') )
        heading.place(x=100, y=5)


        # Placement for the Username entrybox

        def on_enter(e):
            user.delete(0, 'end')


        def on_leave(e):
            name=user.get()
            if name == '':
                user.insert(0, 'Username')


        user = Entry(frame, width=25, fg= 'black', border = 0, bg= "white", font = ('Helvetica', 11) )
        user.place(x=30, y=80)
        user.insert(0, 'Username')
        user.bind('<FocusIn>', on_enter)
        user.bind('<FocusOut>', on_leave)


        Frame(frame, width = 295, height=2, bg='black').place(x=25,y=107)


        # Placement for the Password entrybox

        def on_enter(e):
            code.delete(0, 'end')


        def on_leave(e):
            name=code.get()
            if name== '':
                code.insert(0, 'Password')


        code = Entry(frame, width=25, fg= 'black', border = 0, bg= "white", font = ('Helvetica', 11) )
        code.place(x=30, y=150)
        code.insert(0, 'Password')
        code.bind('<FocusIn>', on_enter)
        code.bind('<FocusOut>', on_leave)


        Frame(frame, width = 295, height=2, bg='black').place(x=25,y=177)

        # Buttons
        main_button = Button(frame, width=39, pady=7, text='Sign In', bg='#57a1f8', fg='white', font=('Helvetica', 9), border=0, command=submit)
        main_button.place(x=35, y=204)
        label = Label(frame, text="Don't have an account?", fg='black', bg='white', font=('Helvetica', 9))
        label.place(x=72.5, y=270)
        instructions_label=tk.Label(root, justify="left", anchor="w", text="(1)Type in Username and Password\n(2)Click on sign in to play the game\n(3)If you don't have an account click sign up at the bottom and enter your preferred credentials to sign up",font=("Helvetica"), bg='white')
        instructions_label.place(relx=.5,rely=.85, anchor=CENTER)
        # Button that switches between login and signup page
        change_option = Button(frame, width=6, text='Sign Up', border=0, bg='white', cursor='hand2', fg='#57a1f8', command=accounts)
        change_option.place(x=215, y=270)
        root.mainloop()

# Class for intructions page
class Instructions(tk.Tk):
    def __init__(self):
        super().__init__()
        self.geometry('600x350')
        self.resizable(False,False)
        self.title("Game Instructions")
        self.configure(bg='#0294ee')
        Label= tk.Label(self, text="Instructions", font=("Helvetica bold", 26), fg="white", bg='#0294ee')
        Label.place(relx=0.5, rely=0.1, anchor=CENTER)
        instructions_label= tk.Label(self, justify="left", anchor="w", text="(1)Select the the difficulty\n(2)Answer 10 math questions correctly within 60 seconds to win. There\n     is no limit to the number of questions the player can attempt.\n(3) Press the start button to play\n(4) New Questions will keep appearing as you answer\n(5)If you get an answer wrong you will lose 2 seconds from the time left\n(6)There will be error messages to guide you if you enter an\n     invalid value\n(7)That's it from me, enjoy the game", font=("Helvetica", 14), bg='#0294ee', fg='white')
        instructions_label.place(relx=0, rely=0.2)
        button= tk.Button(self, text="Go Back", command=lambda: self.change_page())
        button.place(relx=0.5, rely=0.85, anchor=CENTER)

    # Function to switch back to Introduction Page
    def change_page(self):
        self.destroy()
        Intropage()
# Class for final page after game completion
class Results_page(tk.Tk):
    def __init__(self, result):
        super().__init__()
        self.geometry('300x150')
        self.resizable(False,False)
        win_or_lose_label=tk.Label(self, text="",font=("Helvetica bold", 26),fg='white', bg='#0294ee')
        win_or_lose_label.place(relx=0.5, rely=0.2, anchor=CENTER)
        play_again=tk.Button(self, text="Play Again", command=lambda: self.change_page(1))
        play_again.place(relx=.50, rely=.7, anchor=CENTER)
        sign_out=tk.Button(self, text="Sign Out", command=lambda: self.change_page(2))
        sign_out.place(relx=.75, rely=.7, anchor=CENTER)
        exit_button= tk.Button(self, text='Exit' , bg="#ffffff", command=lambda: self.destroy())
        exit_button.place(relx=0.29, rely=0.7, anchor=CENTER)
        self.title("Game Instructions")
        self.configure(bg='#0294ee')
        if result==1:
            win_or_lose_label.config(text="You Win")
        if result==2:
            win_or_lose_label.config(text="You lose")

    # Function to switch pages from final page    
    def change_page(self, page):
        self.destroy()
        if page==1:
            Intropage()
        else:
            Login()  

# Class for introduction page to select game difficulty
class Intropage(tk.Tk):
    def __init__(self):
        super().__init__()
        self.geometry("600x400")
        self.resizable(False, False)
        self.title("Knockout Numbers Introduction")
        self.configure(bg='#0294ee')
        heading_label=tk.Label(self, text="Welcome to Knockout Numbers", font=("Helvetica bold", 26), fg="white", bg='#0294ee')
        heading_label.place(relx=.5,rely=.1, anchor=CENTER)
        easy= tk.Button(self, text="easy", bg='#ffffff',command=lambda: self.change_page(1), height=10, width=20).place(relx=0.1, rely=0.3)
        medium= tk.Button(self, text="medium", bg='#ffffff', command=lambda: self.change_page(2), height=10, width=20).place(relx=0.4, rely=0.3)
        hard= tk.Button(self, text="hard", bg='#ffffff',command=lambda: self.change_page(3), height=10, width=20).place(relx=0.7, rely=0.3)
        exit_button=tk.Button(self, text="exit", command=lambda: self.destroy())
        exit_button.place(relx=0.5, rely=0.8)
        instructions_button=tk.Button(self, text="Instructions", command=lambda: self.change_page(4))
        instructions_button.place(relx=0.75, rely=0.8)
        sign_out=tk.Button(self, text="Sign Out", command=lambda: self.change_page(5))
        sign_out.place(relx=.25, rely=.8)
        self.mainloop()

    # Function to switch page based on difficulty from introduction page
    def change_page(self, page):
        self.destroy()
        if page==1 or page==2 or page ==3:
            Gamepage(page)
        elif page==4:
            Instructions()
        else:
            Login()
  
# Used to start program
if __name__ == "__main__":
    Login()
