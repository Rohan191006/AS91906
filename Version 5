import tkinter as tk
from tkinter import *
from tkinter import messagebox
import random
import json

ACCOUNT_OPTIONS = ["Login", "Signup"]

#class for game page
class gamepage(tk.Tk):
    derived_question = None
    answer = None
    def __init__(app, difficulty):
        super().__init__()
        app.answered_already= False
        score= IntVar()
        app.time_left = 15

        def submit(var1):
            if app.answered_already== False:
                if var1.get() == str(app.answer):
                    result = tk.Label(app, text="Correct", fg="yellow", font=("Courier", 16), bg='#0294ee')
                    result.place(relx=0.4, rely=0.7, relwidth=0.2, relheight=0.1)
                    score.set(score.get()+1)
                    print(app.time_left)

                else:
                    result = tk.Label(app, text="Wrong", fg="yellow", font=("Courier", 16), bg='#0294ee')
                    result.place(relx=0.4, rely=0.7, relwidth=0.2, relheight=0.1)
                app.answered_already = True
                app.time_left = 0


        def update_timer():
            if app.time_left > 0:
                app.time_left -= 1
                timer_label.config(text=f"Time left: {app.time_left}s")
                app.after(1000, update_timer)
            else:
                if not app.answered_already:  # If the player hasn't answered yet
                    result = tk.Label(app, text="Time's Up", fg="yellow", font=("Courier", 16), bg='#0294ee')
                    result.place(relx=0.4, rely=0.7, relwidth=0.2, relheight=0.1)
                    app.answered_already = True



        def try_again():
            try_again.num1update = random.randint(0, max_var)
            try_again.num2update = random.randint(0, max_var)
            if difficulty==1:
                operation = random.choice(["+"])
            elif difficulty==2:
                operation = random.choice(["+", "-"])
            else:
                operation = random.choice(["+", "-", "*"])

            app.derived_question= f"{try_again.num1update} {operation} {try_again.num2update}"
            app.answer= eval(app.derived_question)
            app.derived_question = f"{try_again.num1update} {operation} {try_again.num2update}"
            app.answer = eval(app.derived_question)
            score_label= tk.Label(app,text=f"Score: {score.get()}",bg='#0294ee', font= 16)
            score_label.place(relx=0.63, rely=0.71)
            newQ = tk.Label(app, text=app.derived_question, font=("Courier", 16),bg='#0294ee')
            newQ.place(relx=0.4, rely=0.7, relwidth=.2)
            app.answered_already= False
            solving.delete(0, tk.END)
            app.time_left = 15
            update_timer()

        app.title("Math For Kids")
        app.geometry("600x400")
        app.configure(bg='#0294ee')
        app.resizable(False, False)
        start =tk.Button(app, text="Start", command=try_again,bg='#ffffff')
        start.place(relx=0.463, rely=0.7)

        if difficulty == 1: 
            max_var = 10
        elif difficulty == 2:
            max_var = 25
        else:
            max_var = 50


        solving = tk.Entry(app)
        solving.place(relx=0.4, rely=0.8, relwidth=0.2, relheight=0.05)
        submit_button = tk.Button(app, text="Submit", command=lambda: submit(solving),bg='#ffffff')
        submit_button.place(relx=0.458, rely=0.9)
        try_again = tk.Button(app, text="Next Question", command=try_again,bg='#ffffff')
        try_again.place(relx=0.01, rely=0.7)
        back_button = tk.Button(app, text="GO Back", bg="#ffffff", command=lambda: app.change_page())
        back_button.place(relx=0.01, rely=0.8)
        exit_button= tk.Button(app, text='Exit' , bg="#ffffff", command=lambda: app.destroy())
        exit_button.place(relx=0.01, rely=0.9)
        timer_label = tk.Label(app, text=f"Time left: {app.time_left}s", font=("Courier", 16), bg='#0294ee')
        timer_label.place(relx=0.63, rely=0.9)        
        app.mainloop()

    def change_page(self):
        self.destroy()
        intropage()     


#class for login screen with error proofing
class login(Tk):
    def __init__(root):
        super().__init__()
        root.option = 0
        root.title('Swimmer Login Page')
        root.geometry('925x500+300+200')
        root.configure(bg="white")
        root.resizable(False, False)

        def accounts():
            old_option = ACCOUNT_OPTIONS[root.option]
            if root.option == 1:
                root.option = 0
            else:
                root.option = 1
                
            heading.config(text=ACCOUNT_OPTIONS[root.option])
            main_button.config(text=ACCOUNT_OPTIONS[root.option])
            change_option.config(text=old_option)

        def submit():
            username=user.get()
            password=code.get()

            if len(username) > 4 and username.find(" ") == -1:
                if len(password) > 5 and password.find(" ") == -1:
                    if root.option == 0:
                        #Sign In
                        open_logins = open("logins.json", "r")
                        accounts = json.load(open_logins)
                        open_logins.close()
                        for account in accounts:
                            if account["username"] == username and account["password"] == password:
                                root.destroy()
                                intropage()
                                return
                            
                        messagebox.showerror(message="Invalid login")
                    else:
                        #Sign Up
                        open_logins = open("logins.json", "r")
                        accounts = json.load(open_logins)
                        open_logins.close()
                        
                        accounts.append({"username": username, "password": password})
                        write_file = open("logins.json", "w")
                        json.dump(accounts, write_file)
                        write_file.close()
                        root.destroy()
                        intropage()
                        return
                else:
                    messagebox.showerror(message="pass too short and/or has space")
            else:
                messagebox.showerror(message="user too short and/or has space")


        #Background image, frame and heading for GUI

        frame= Frame(root, width=350, height=350, bg="white")
        frame.place(x=480, y=70)


        heading = Label(frame, text = ACCOUNT_OPTIONS[root.option], fg = '#57a1f8', bg='white', font = ('Helvetica', 23, 'bold') )
        heading.place(x=100, y=5)


        #Placement for the Username textbox

        def on_enter(e):
            user.delete(0, 'end')


        def on_leave(e):
            name=user.get()
            if name == '':
                user.insert(0, 'Username')


        user = Entry(frame, width=25, fg= 'black', border = 0, bg= "white", font = ('Helvetica', 11) )
        user.place(x=30, y=80)
        user.insert(0, 'Username')
        user.bind('<FocusIn>', on_enter)
        user.bind('<FocusOut>', on_leave)


        Frame(frame, width = 295, height=2, bg='black').place(x=25,y=107)


        #Placement for the Password textbox

        def on_enter(e):
            code.delete(0, 'end')


        def on_leave(e):
            name=code.get()
            if name== '':
                code.insert(0, 'Password')


        code = Entry(frame, width=25, fg= 'black', border = 0, bg= "white", font = ('Helvetica', 11) )
        code.place(x=30, y=150)
        code.insert(0, 'Password')
        code.bind('<FocusIn>', on_enter)
        code.bind('<FocusOut>', on_leave)


        Frame(frame, width = 295, height=2, bg='black').place(x=25,y=177)

        #Buttons

        main_button = Button(frame, width=39, pady=7, text='Sign In', bg='#57a1f8', fg='white', font=('Helvetica', 9), border=0, command=submit)
        main_button.place(x=35, y=204)
        label = Label(frame, text="Don't have an account?", fg='black', bg='white', font=('Helvetica', 9))
        label.place(x=75, y=270)


        change_option = Button(frame, width=6, text='Sign Up', border=0, bg='white', cursor='hand2', fg='#57a1f8', command=accounts)
        change_option.place(x=215, y=270)

        root.mainloop()


#class for intro page to select game difficulty
class intropage(tk.Tk):
    def __init__(self):
        super().__init__()
        self.geometry("600x400")
        self.resizable(False, False)
        self.title("Introduction")
        self.configure(bg='#ffffff')
        frame = tk.Frame(bg='#ffffff')
        easy= tk.Button(self, text="easy", bg='#ffffff',command=lambda: self.change_page(1), height=10, width=20).place(relx=0.1, rely=0.3)
        medium= tk.Button(self, text="medium", bg='#ffffff', command=lambda: self.change_page(2), height=10, width=20).place(relx=0.4, rely=0.3)
        hard= tk.Button(self, text="hard", bg='#ffffff',command=lambda: self.change_page(3), height=10, width=20).place(relx=0.7, rely=0.3)
        frame.pack()
        self.mainloop()

    def change_page(self, diff):
        self.destroy()
        gamepage(diff)  

if __name__ == "__main__":
    intropage()
